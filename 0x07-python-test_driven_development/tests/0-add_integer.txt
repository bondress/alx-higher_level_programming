The ``add two integer`` module
==============================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

Importing the function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers
    >>> add_integer(3, 4)
    7

Adding two negative integers
    >>> add_integer(-3, -4)
    -7

Adding one positive and one negative integer
    >>> add_integer(3, -4)
    -1

Adding two integers using the default value of b
    >>> add_integer(3)
    101

Adding one positive float and one positive integer
    >>> add_integer(3.3, 4)
    7

Adding one positive float and one negative integer
	>>> add_integer(5.4, -3)
	2

Adding two positive floats
    >>> add_integer(3.3, 5.1)
    8

Adding two negative floats
	    >>> add_integer(-3.3, -4.1)
	    -7

Adding a float and the default value of b
    >>> add_integer(4.4)
    102

Passing no argument to the function
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Passing a only one string
    >>> add_integer("Boo")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding an integer and a string
    >>> add_integer(7, "Wow")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Adding a letter and a number
    >>> add_integer('w', 3)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number and a letter
    >>> add_integer(3, 'w')
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

Adding two letters
    >>> add_integer('w', 'z')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((7, 8))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number and a list
    >>> add_integer(17, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Case Overflow:

    >>> add_integer(float('inf'), 3)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN 1:

    >>> add_integer(0, float('NaN'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer

Case NaN 2:

    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
